{"version":3,"sources":["api.ts","components/Loader/Loader.tsx","components/PageList/PeopleList.tsx","components/NavLinkComponent.tsx","components/NavBar.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","className","PeopleList","useState","peopleList","setPeopleList","showError","setShowError","isNoPeopleMessage","setIsNoPeopleMessage","isProcessing","setIsProcesing","Slug","useParams","findPerson","personName","find","person","name","useEffect","map","motherName","fatherName","mother","father","setPerson","length","catch","finally","sex","born","died","slug","cn","to","NavLinkComponent","content","isActive","NavBar","role","App","path","index","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a9ecffdc.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Link, useParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\n\nexport const PeopleList = () => {\n  const [peopleList, setPeopleList] = useState<Person[]>([]);\n  const [showError, setShowError] = useState(false);\n  const [isNoPeopleMessage, setIsNoPeopleMessage] = useState(false);\n  const [isProcessing, setIsProcesing] = useState(false);\n  const Slug = useParams();\n\n  const findPerson = (personName: string | null, response: Person[]) => {\n    return response.find((person: Person) => person.name === personName);\n  };\n\n  const setPerson = (response: Person[]) => {\n    setPeopleList(response.map(person => {\n      return {\n        ...person,\n        motherName: person.motherName || '-',\n        fatherName: person.fatherName || '-',\n        mother: findPerson(person.motherName, response),\n        father: findPerson(person.fatherName, response),\n      };\n    }));\n  };\n\n  useEffect(() => {\n    setIsProcesing(true);\n    getPeople()\n      .then((response) => {\n        setPerson(response);\n        if (!response.length) {\n          setIsNoPeopleMessage(true);\n        }\n      })\n      .catch(() => setShowError(true))\n      .finally(() => setIsProcesing(false));\n  }, []);\n\n  return (\n    <div className=\"block\">\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"box table-container\">\n        {isProcessing && <Loader />}\n\n        {showError && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        )}\n\n        {isNoPeopleMessage && (\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        )}\n\n        {peopleList.length > 0 && (\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Sex</th>\n                <th>Born</th>\n                <th>Died</th>\n                <th>Mother</th>\n                <th>Father</th>\n              </tr>\n            </thead>\n            <tbody>\n              {peopleList.map(({\n                name,\n                sex,\n                born,\n                died,\n                mother,\n                father,\n                motherName,\n                fatherName,\n                slug,\n              }) => (\n                <tr\n                  key={name}\n                  data-cy=\"person\"\n                  className={cn({\n                    'has-background-warning': `${Slug.slug}` === slug,\n                  })}\n                >\n                  <td>\n                    <Link\n                      className={cn({ 'has-text-danger': sex === 'f' })}\n                      to={`/people/${slug}`}\n                    >\n                      {name}\n                    </Link>\n                  </td>\n\n                  <td>{sex}</td>\n                  <td>{born}</td>\n                  <td>{died}</td>\n                  <td>\n                    {mother\n                      ? (\n                        <Link\n                          to={`/people/${mother.slug}`}\n                          className=\"has-text-danger\"\n                        >\n                          {motherName}\n                        </Link>\n                      )\n                      : motherName}\n                  </td>\n\n                  <td>\n                    {father\n                      ? (\n                        <Link\n                          to={`/people/${father.slug}`}\n                        >\n                          {fatherName}\n                        </Link>\n                      )\n                      : fatherName}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\ntype Props = {\n  to: string,\n  content: string,\n};\n\nexport const NavLinkComponent: React.FC<Props> = ({ to, content }) => (\n  <NavLink\n    className={({ isActive }) => cn(\n      'navbar-item',\n      { 'has-background-grey-lighter': isActive },\n    )}\n    to={`${to}`}\n  >\n    {content}\n  </NavLink>\n);\n","import { NavLinkComponent } from './NavLinkComponent';\n\nexport const NavBar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLinkComponent to=\"/\" content=\"Home\" />\n          <NavLinkComponent to=\"people\" content=\"People\" />\n\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeopleList } from './components/PageList/PeopleList';\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"people\">\n            <Route index element={<PeopleList />} />\n            <Route path=\":slug\" element={<PeopleList />} />\n          </Route>\n          <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}